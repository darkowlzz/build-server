// Code generated by protoc-gen-go. DO NOT EDIT.
// source: build.proto

/*
Package build is a generated protocol buffer package.

It is generated from these files:
	build.proto

It has these top-level messages:
	InfoRequest
	InfoReply
	EngineInfoRequest
	EngineInfoReply
	StartBuildRequest
	StartBuildReply
	BuildStatusRequest
	BuildStatusReply
	GetArtifactsRequest
	GetArtifactsReply
*/
package build

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type InfoRequest struct {
}

func (m *InfoRequest) Reset()                    { *m = InfoRequest{} }
func (m *InfoRequest) String() string            { return proto.CompactTextString(m) }
func (*InfoRequest) ProtoMessage()               {}
func (*InfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type InfoReply struct {
	// Name of the build server.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Version of the build server.
	Version string `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
}

func (m *InfoReply) Reset()                    { *m = InfoReply{} }
func (m *InfoReply) String() string            { return proto.CompactTextString(m) }
func (*InfoReply) ProtoMessage()               {}
func (*InfoReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *InfoReply) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *InfoReply) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type EngineInfoRequest struct {
	// Name of the build engine whose info is being requested.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *EngineInfoRequest) Reset()                    { *m = EngineInfoRequest{} }
func (m *EngineInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*EngineInfoRequest) ProtoMessage()               {}
func (*EngineInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *EngineInfoRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type EngineInfoReply struct {
	// Name of the build engine.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Version of the build engine.
	Version string `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
}

func (m *EngineInfoReply) Reset()                    { *m = EngineInfoReply{} }
func (m *EngineInfoReply) String() string            { return proto.CompactTextString(m) }
func (*EngineInfoReply) ProtoMessage()               {}
func (*EngineInfoReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *EngineInfoReply) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EngineInfoReply) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type StartBuildRequest struct {
	// The command to run in the build container.
	Command []string `protobuf:"bytes,1,rep,name=command" json:"command,omitempty"`
	// The container image to start the build with.
	Image string `protobuf:"bytes,2,opt,name=image" json:"image,omitempty"`
	// The build context of the build. It's a tar gzipped byte stream.
	BuildCtx []byte `protobuf:"bytes,3,opt,name=buildCtx,proto3" json:"buildCtx,omitempty"`
	// The mount path where the source code is mounted.
	MountPath string `protobuf:"bytes,4,opt,name=mountPath" json:"mountPath,omitempty"`
}

func (m *StartBuildRequest) Reset()                    { *m = StartBuildRequest{} }
func (m *StartBuildRequest) String() string            { return proto.CompactTextString(m) }
func (*StartBuildRequest) ProtoMessage()               {}
func (*StartBuildRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *StartBuildRequest) GetCommand() []string {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *StartBuildRequest) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *StartBuildRequest) GetBuildCtx() []byte {
	if m != nil {
		return m.BuildCtx
	}
	return nil
}

func (m *StartBuildRequest) GetMountPath() string {
	if m != nil {
		return m.MountPath
	}
	return ""
}

type StartBuildReply struct {
	// The ID of the build.
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *StartBuildReply) Reset()                    { *m = StartBuildReply{} }
func (m *StartBuildReply) String() string            { return proto.CompactTextString(m) }
func (*StartBuildReply) ProtoMessage()               {}
func (*StartBuildReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *StartBuildReply) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type BuildStatusRequest struct {
	// The ID of the build.
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *BuildStatusRequest) Reset()                    { *m = BuildStatusRequest{} }
func (m *BuildStatusRequest) String() string            { return proto.CompactTextString(m) }
func (*BuildStatusRequest) ProtoMessage()               {}
func (*BuildStatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *BuildStatusRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type BuildStatusReply struct {
	// The ID of the build.
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// The ID of the container.
	ContainerID string `protobuf:"bytes,2,opt,name=containerID" json:"containerID,omitempty"`
	// The Status of the build.
	Status string `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
}

func (m *BuildStatusReply) Reset()                    { *m = BuildStatusReply{} }
func (m *BuildStatusReply) String() string            { return proto.CompactTextString(m) }
func (*BuildStatusReply) ProtoMessage()               {}
func (*BuildStatusReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *BuildStatusReply) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *BuildStatusReply) GetContainerID() string {
	if m != nil {
		return m.ContainerID
	}
	return ""
}

func (m *BuildStatusReply) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type GetArtifactsRequest struct {
	// The ID of the build.
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetArtifactsRequest) Reset()                    { *m = GetArtifactsRequest{} }
func (m *GetArtifactsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetArtifactsRequest) ProtoMessage()               {}
func (*GetArtifactsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *GetArtifactsRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GetArtifactsReply struct {
	// The build artifacts returned from the build server in tar gzipped byte
	// stream.
	Artifacts []byte `protobuf:"bytes,1,opt,name=artifacts,proto3" json:"artifacts,omitempty"`
}

func (m *GetArtifactsReply) Reset()                    { *m = GetArtifactsReply{} }
func (m *GetArtifactsReply) String() string            { return proto.CompactTextString(m) }
func (*GetArtifactsReply) ProtoMessage()               {}
func (*GetArtifactsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *GetArtifactsReply) GetArtifacts() []byte {
	if m != nil {
		return m.Artifacts
	}
	return nil
}

func init() {
	proto.RegisterType((*InfoRequest)(nil), "build.InfoRequest")
	proto.RegisterType((*InfoReply)(nil), "build.InfoReply")
	proto.RegisterType((*EngineInfoRequest)(nil), "build.EngineInfoRequest")
	proto.RegisterType((*EngineInfoReply)(nil), "build.EngineInfoReply")
	proto.RegisterType((*StartBuildRequest)(nil), "build.StartBuildRequest")
	proto.RegisterType((*StartBuildReply)(nil), "build.StartBuildReply")
	proto.RegisterType((*BuildStatusRequest)(nil), "build.BuildStatusRequest")
	proto.RegisterType((*BuildStatusReply)(nil), "build.BuildStatusReply")
	proto.RegisterType((*GetArtifactsRequest)(nil), "build.GetArtifactsRequest")
	proto.RegisterType((*GetArtifactsReply)(nil), "build.GetArtifactsReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Build service

type BuildClient interface {
	GetInfo(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoReply, error)
	GetEngineInfo(ctx context.Context, in *EngineInfoRequest, opts ...grpc.CallOption) (*EngineInfoReply, error)
	StartBuild(ctx context.Context, in *StartBuildRequest, opts ...grpc.CallOption) (*StartBuildReply, error)
	BuildStatus(ctx context.Context, in *BuildStatusRequest, opts ...grpc.CallOption) (*BuildStatusReply, error)
	GetArtifacts(ctx context.Context, in *GetArtifactsRequest, opts ...grpc.CallOption) (*GetArtifactsReply, error)
}

type buildClient struct {
	cc *grpc.ClientConn
}

func NewBuildClient(cc *grpc.ClientConn) BuildClient {
	return &buildClient{cc}
}

func (c *buildClient) GetInfo(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoReply, error) {
	out := new(InfoReply)
	err := grpc.Invoke(ctx, "/build.Build/GetInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildClient) GetEngineInfo(ctx context.Context, in *EngineInfoRequest, opts ...grpc.CallOption) (*EngineInfoReply, error) {
	out := new(EngineInfoReply)
	err := grpc.Invoke(ctx, "/build.Build/GetEngineInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildClient) StartBuild(ctx context.Context, in *StartBuildRequest, opts ...grpc.CallOption) (*StartBuildReply, error) {
	out := new(StartBuildReply)
	err := grpc.Invoke(ctx, "/build.Build/StartBuild", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildClient) BuildStatus(ctx context.Context, in *BuildStatusRequest, opts ...grpc.CallOption) (*BuildStatusReply, error) {
	out := new(BuildStatusReply)
	err := grpc.Invoke(ctx, "/build.Build/BuildStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildClient) GetArtifacts(ctx context.Context, in *GetArtifactsRequest, opts ...grpc.CallOption) (*GetArtifactsReply, error) {
	out := new(GetArtifactsReply)
	err := grpc.Invoke(ctx, "/build.Build/GetArtifacts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Build service

type BuildServer interface {
	GetInfo(context.Context, *InfoRequest) (*InfoReply, error)
	GetEngineInfo(context.Context, *EngineInfoRequest) (*EngineInfoReply, error)
	StartBuild(context.Context, *StartBuildRequest) (*StartBuildReply, error)
	BuildStatus(context.Context, *BuildStatusRequest) (*BuildStatusReply, error)
	GetArtifacts(context.Context, *GetArtifactsRequest) (*GetArtifactsReply, error)
}

func RegisterBuildServer(s *grpc.Server, srv BuildServer) {
	s.RegisterService(&_Build_serviceDesc, srv)
}

func _Build_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/build.Build/GetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildServer).GetInfo(ctx, req.(*InfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Build_GetEngineInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EngineInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildServer).GetEngineInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/build.Build/GetEngineInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildServer).GetEngineInfo(ctx, req.(*EngineInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Build_StartBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartBuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildServer).StartBuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/build.Build/StartBuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildServer).StartBuild(ctx, req.(*StartBuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Build_BuildStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildServer).BuildStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/build.Build/BuildStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildServer).BuildStatus(ctx, req.(*BuildStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Build_GetArtifacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArtifactsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildServer).GetArtifacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/build.Build/GetArtifacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildServer).GetArtifacts(ctx, req.(*GetArtifactsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Build_serviceDesc = grpc.ServiceDesc{
	ServiceName: "build.Build",
	HandlerType: (*BuildServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInfo",
			Handler:    _Build_GetInfo_Handler,
		},
		{
			MethodName: "GetEngineInfo",
			Handler:    _Build_GetEngineInfo_Handler,
		},
		{
			MethodName: "StartBuild",
			Handler:    _Build_StartBuild_Handler,
		},
		{
			MethodName: "BuildStatus",
			Handler:    _Build_BuildStatus_Handler,
		},
		{
			MethodName: "GetArtifacts",
			Handler:    _Build_GetArtifacts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "build.proto",
}

func init() { proto.RegisterFile("build.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 398 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0x4d, 0x0f, 0xd2, 0x40,
	0x14, 0xb4, 0xe5, 0xcb, 0xbe, 0x82, 0xc0, 0xd3, 0xe0, 0xda, 0x70, 0xa8, 0x1b, 0x8d, 0x9c, 0x48,
	0xd0, 0x93, 0x27, 0x3f, 0x50, 0x09, 0x37, 0x53, 0xae, 0x5e, 0x16, 0xba, 0xe0, 0x26, 0x74, 0x8b,
	0xed, 0xd6, 0xc8, 0xc1, 0xbf, 0xe8, 0x6f, 0x32, 0xdd, 0x6e, 0x69, 0x81, 0x7a, 0xf0, 0xc6, 0xcc,
	0x1b, 0x66, 0xe7, 0x7d, 0x14, 0xdc, 0x6d, 0x26, 0x8e, 0xe1, 0xfc, 0x94, 0xc4, 0x2a, 0xc6, 0x8e,
	0x06, 0x74, 0x00, 0xee, 0x5a, 0xee, 0xe3, 0x80, 0xff, 0xc8, 0x78, 0xaa, 0xe8, 0x5b, 0x70, 0x0a,
	0x78, 0x3a, 0x9e, 0x11, 0xa1, 0x2d, 0x59, 0xc4, 0x89, 0xe5, 0x5b, 0x33, 0x27, 0xd0, 0xbf, 0x91,
	0x40, 0xef, 0x27, 0x4f, 0x52, 0x11, 0x4b, 0x62, 0x6b, 0xba, 0x84, 0xf4, 0x15, 0x8c, 0x3f, 0xcb,
	0x83, 0x90, 0xbc, 0xe6, 0xd7, 0x64, 0x41, 0xdf, 0xc1, 0xb0, 0x2e, 0xfc, 0xff, 0x97, 0x7e, 0xc3,
	0x78, 0xa3, 0x58, 0xa2, 0x3e, 0xe6, 0x1d, 0x94, 0x2f, 0x11, 0xe8, 0xed, 0xe2, 0x28, 0x62, 0x32,
	0x24, 0x96, 0xdf, 0xca, 0xe5, 0x06, 0xe2, 0x13, 0xe8, 0x88, 0x88, 0x1d, 0xb8, 0xb1, 0x29, 0x00,
	0x7a, 0xf0, 0x50, 0x4f, 0x60, 0xa9, 0x7e, 0x91, 0x96, 0x6f, 0xcd, 0xfa, 0xc1, 0x05, 0xe3, 0x14,
	0x9c, 0x28, 0xce, 0xa4, 0xfa, 0xca, 0xd4, 0x77, 0xd2, 0xd6, 0xff, 0xaa, 0x08, 0xfa, 0x1c, 0x86,
	0xf5, 0xe7, 0xf3, 0xfc, 0x8f, 0xc0, 0x16, 0xa1, 0x49, 0x6f, 0x8b, 0x90, 0xbe, 0x00, 0xd4, 0xd5,
	0x8d, 0x62, 0x2a, 0x4b, 0xcb, 0x88, 0xb7, 0xaa, 0x6f, 0x30, 0xba, 0x52, 0x35, 0x38, 0xa1, 0x0f,
	0xee, 0x2e, 0x96, 0x8a, 0x09, 0xc9, 0x93, 0xf5, 0x27, 0xd3, 0x42, 0x9d, 0xc2, 0x09, 0x74, 0x53,
	0x6d, 0xa0, 0xdb, 0x70, 0x02, 0x83, 0xe8, 0x4b, 0x78, 0xbc, 0xe2, 0xea, 0x43, 0xa2, 0xc4, 0x9e,
	0xed, 0xd4, 0x3f, 0x43, 0x2c, 0x60, 0x7c, 0x2d, 0xcb, 0x53, 0x4c, 0xc1, 0x61, 0x25, 0xa3, 0xb5,
	0xfd, 0xa0, 0x22, 0x5e, 0xff, 0xb1, 0xa1, 0xa3, 0x83, 0xe3, 0x02, 0x7a, 0x2b, 0xae, 0xf2, 0x3d,
	0x22, 0xce, 0x8b, 0xeb, 0xaa, 0x6d, 0xdf, 0x1b, 0x5d, 0x71, 0xa7, 0xe3, 0x99, 0x3e, 0xc0, 0x25,
	0x0c, 0x56, 0x5c, 0x55, 0x07, 0x80, 0xc4, 0x88, 0xee, 0x8e, 0xc7, 0x9b, 0x34, 0x54, 0x0a, 0x93,
	0xf7, 0x00, 0xd5, 0x0a, 0x2e, 0x0e, 0x77, 0x47, 0x71, 0x71, 0xb8, 0xd9, 0x97, 0x8e, 0xe1, 0xd6,
	0x66, 0x8f, 0xcf, 0x8c, 0xf0, 0x7e, 0x6b, 0xde, 0xd3, 0xa6, 0x52, 0x61, 0xf2, 0x05, 0xfa, 0xf5,
	0xd9, 0xa1, 0x67, 0xa4, 0x0d, 0x73, 0xf7, 0x48, 0x63, 0x4d, 0xfb, 0x6c, 0xbb, 0xfa, 0x93, 0x7c,
	0xf3, 0x37, 0x00, 0x00, 0xff, 0xff, 0x83, 0xae, 0x1a, 0x0e, 0xa1, 0x03, 0x00, 0x00,
}
